{"version":3,"sources":["components/MarkerWindow.js","components/Menu.js","components/App.js","utils/dataHelper.js","utils/mapHelper.js","serviceWorker.js","index.js"],"names":["MarkerWindow","props","marker","data","react_default","a","createElement","role","className","tabIndex","onKeyPress","openInfoWindow","bind","this","onClick","onMouseEnter","onMouseLeave","minimizeMarker","fullName","Menu","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","locations","query","showMenu","filterLocations","assertThisInitialized","toggleSuggestions","event","value","target","cabotPlaces","forEach","location","toLowerCase","indexOf","setVisible","push","setState","_this2","locationlist","map","listItem","index","components_MarkerWindow","key","aria-labelledby","id","type","placeholder","onChange","Component","App","infowindow","previousMarker","initMap","name","description","latitude","longitude","streetAddress","window","src","ref","document","getElementsByTagName","script","async","onerror","write","parentNode","insertBefore","mapHelper","self","mapview","getElementById","style","height","innerHeight","google","maps","Map","center","lat","lng","zoom","mapTypeControl","fullscreenControl","InfoWindow","addListener","addDomListener","getCenter","trigger","setCenter","Marker","position","LatLng","animation","Animation","DROP","display","open","setAnimation","BOUNCE","setContent","getPosition","panBy","displayMarker","long","fetch","then","res","status","json","locationInfo","response","venues","heading","category","categories","checkinsCount","stats","usersCount","hereNow","summary","fourSquareLink","catch","err","close","components_Menu","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","ReactDOM","render","components_App","URL","process","href","origin","addEventListener","concat","contentType","headers","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.671b71d4.chunk.js","sourcesContent":["import React from 'react';\n\nfunction MarkerWindow (props) {\n  let marker = props.data.marker;\n    return (\n        <li\n          role=\"button\"\n          className=\"box\"\n          tabIndex=\"0\"\n          onKeyPress={props.openInfoWindow.bind(this, marker)}\n          onClick={props.openInfoWindow.bind(this, marker)}\n          onMouseEnter={props.openInfoWindow.bind(this, marker)}\n          onMouseLeave={props.minimizeMarker}\n        >{props.data.fullName}</li>\n    );\n}\n\nexport default MarkerWindow;\n","import React, {Component} from 'react';\nimport MarkerWindow from './MarkerWindow';\n\nclass Menu extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            'locations': '',\n            'query': '',\n            'showMenu': false,\n        };\n        // so we dont lose context\n        this.filterLocations = this.filterLocations.bind(this);\n        this.toggleSuggestions = this.toggleSuggestions.bind(this);\n    }\n\n    // filters the list of suggestions\n    filterLocations(event) {\n        this.props.minimizeMarker();\n        const {value} = event.target;\n        let locations = [];\n        // loop through elements and set visibility if they match the query\n        this.props.cabotPlaces.forEach(function (location) {\n            if (location.fullName.toLowerCase().indexOf(value.toLowerCase()) >= 0) {\n                location.marker.setVisible(true);\n                locations.push(location);\n            } else {\n                location.marker.setVisible(false);\n            }\n        });\n\n        this.setState({\n            'locations': locations,\n            'query': value\n        });\n    }\n\n    componentWillMount() {\n        this.setState({\n            'locations': this.props.cabotPlaces\n        });\n    }\n\n    toggleSuggestions() {\n        this.setState({\n            'showMenu': !this.state.showMenu\n        });\n    }\n\n    render() {\n        let locationlist = this.state.locations.map((listItem, index) => {\n            return (\n                <MarkerWindow key={index} openInfoWindow={this.props.openInfoWindow.bind(this)} data={listItem}/>\n            );\n        }, this);\n\n        return (\n            <div className=\"search\">\n              <div className=\"button\" onClick={this.toggleSuggestions}>\n                <h1 className='app-title'> Visit Cabot! </h1>\n                <small>Click to {!this.state.showMenu ? 'see' : 'hide' } Suggestions!</small>\n                <hr />\n              </div>\n                <input\n                  role=\"search\"\n                  aria-labelledby=\"filter\"\n                  id=\"search-field\"\n                  className=\"search-field\"\n                  type=\"text\"\n                  placeholder=\"Filter Suggestions\"\n                  value={this.state.query}\n                  onChange={this.filterLocations}\n                />\n                <ul>\n                    {this.state.showMenu && locationlist}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default Menu;\n","import React, {Component} from 'react';\nimport Menu from './Menu';\nimport * as mapHelper from '../utils/mapHelper';\nimport * as dataHelper from '../utils/dataHelper';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            'cabotPlaces':[],\n            'map': '',\n            'infowindow': '',\n            'previousMarker': ''\n        };\n\n        // keep context when invoking functions\n        this.initMap = this.initMap.bind(this);\n        this.openInfoWindow = this.openInfoWindow.bind(this);\n        this.minimizeMarker = this.minimizeMarker.bind(this);\n    }\n\n    componentWillMount() {\n      // get places from data API before component mounts\n      this.setState({\n        'cabotPlaces': dataHelper.getPlaces()\n      });\n    }\n\n    componentDidMount() {\n      window.initMap = this.initMap;\n      // Asynchronously load Google Maps\n      const mapsKey = 'AIzaSyAePOTf0XVIBUytjxUa0Pg0QSU7Jp23LiI';\n      const mapsCallback = 'initMap';\n      const mapsURL = 'https://maps.googleapis.com/maps/api/js?key=' + mapsKey + '&callback=' + mapsCallback;\n      mapHelper.createMap(mapsURL);\n    }\n    // most of this init function is based on the Udacity google maps API course example\n    initMap() {\n        let self = this;\n\n        let mapview = document.getElementById('map');\n        mapview.style.height = window.innerHeight + \"px\";\n        let map = new window.google.maps.Map(mapview, {\n            center: {lat: 34.963541, lng: -92.022440}, // the center of Cabot, Ar\n            zoom: 13,\n            mapTypeControl: false,\n            fullscreenControl: false\n        });\n\n        let InfoWindow = new window.google.maps.InfoWindow({});\n\n        window.google.maps.event.addListener(InfoWindow, 'closeclick', function () {\n            self.minimizeMarker();\n        });\n\n        this.setState({\n            'map': map,\n            'infowindow': InfoWindow\n        });\n        // make the map responsive if screen size changes\n        window.google.maps.event.addDomListener(window, \"resize\", function () {\n            let center = map.getCenter();\n            window.google.maps.event.trigger(map, \"resize\");\n            self.state.map.setCenter(center);\n        });\n        // if the user clicks somewhere on the map, close the info marker\n        window.google.maps.event.addListener(map, 'click', function () {\n            self.minimizeMarker();\n        });\n        // for each location in our cabotPlaces array, drop (animate) a pin\n        let cabotPlaces = [];\n        this.state.cabotPlaces.forEach(function (location) {\n            let fullName = location.name + ' - ' + location.description;\n            let marker = new window.google.maps.Marker({\n                position: new window.google.maps.LatLng(location.latitude, location.longitude),\n                animation: window.google.maps.Animation.DROP,\n                map: map\n            });\n            // have the pin listen for clicks, and open the info marker window\n            marker.addListener('click', function () {\n                self.openInfoWindow(marker);\n            });\n            // add properties to our location object\n            location.fullName = fullName;\n            location.marker = marker;\n            location.display = true;\n            cabotPlaces.push(location);\n        });\n        this.setState({\n            'cabotPlaces': cabotPlaces\n        });\n    }\n\n    openInfoWindow(marker) {\n        //close any existing markers\n        this.minimizeMarker();\n        //open the marker window on the map\n        this.state.infowindow.open(this.state.map, marker);\n        //animate the icon of the marker\n        marker.setAnimation(window.google.maps.Animation.BOUNCE);\n        this.setState({\n            'previousMarker': marker\n        });\n        //while waiting for response from displayMarker:\n        this.state.infowindow.setContent('Loading SquareSpace Data...');\n        //center the map over the selected icon\n        this.state.map.setCenter(marker.getPosition());\n        //offset the screen so the menu doesnt hide the marker\n        this.state.map.panBy(0, -250);\n        // now show the marker info\n        this.displayMarker(marker);\n    }\n\n    displayMarker(marker) {\n      //set the marker, and url to request info\n        let self = this;\n        const clientId = \"client_id=2WN2LW0H3PTZ5ANP5B2P1ZPF0JIDBWZNPHXPBDZIRPJVGPJQ\";\n        const clientSecret = \"&client_secret=GZNVTNU3MJ0MTEXZD1G14QZA4R4IAB3FH5MLL21MLIBULV5J\";\n        const version = \"&v=20181115\";\n        // we only want one result\n        const limit = \"&limit=1\";\n\n        let lat = marker.getPosition().lat();\n        let long = marker.getPosition().lng();\n        // get marker information from FourSqure API\n        let url = \"https://api.foursquare.com/v2/venues/search?\" + clientId + clientSecret + version + \"&ll=\" + lat + \",\" + long + limit;\n        // TODO: move this fetch call to component life cycle event, to avoid reloading information\n        fetch(url)\n            .then(\n                function (res) {\n                    if (res.status !== 200) {\n                        self.state.infowindow.setContent(\"We were unable to retrieve this locations info!\");\n                        return;\n                    }\n                    res.json().then(function (data) {\n                        let locationInfo = data.response.venues[0];\n                        let heading = '<h2 class=\"location-text\">' + locationInfo.name + '</h2>';\n                        let category = '<span class=\"location-text\">' + locationInfo.categories[0].name + '</span><hr/>';\n                        let checkinsCount = '<b>Number of Check-Ins: </b>' + locationInfo.stats.checkinsCount + '<br>';\n                        let usersCount = '<b>Total Visitors: </b>' + locationInfo.stats.usersCount + '<br>';\n                        let hereNow = '<b>Current Visitors: </b>' + locationInfo.hereNow.summary + '<hr/>';\n                        let fourSquareLink = '<a href=\"https://foursquare.com/v/'+ locationInfo.id +'\" target=\"_blank\">Check it out on FourSquare!</a> '\n                        self.state.infowindow.setContent(heading + category + checkinsCount + usersCount + hereNow + fourSquareLink);\n                    });\n                }\n            )\n            .catch(function (err) {\n              self.state.infowindow.setContent(\"We were unable to retrieve this locations info!\");\n            });\n    }\n\n    minimizeMarker() {\n      //stop animations on the previous marker\n        if (this.state.previousMarker) {\n            this.state.previousMarker.setAnimation(null);\n        }\n        // remove the previous marker from the state\n        this.setState({\n            'previousMarker': ''\n        });\n        //close the current infowindow\n        this.state.infowindow.close();\n    }\n\n  render() {\n    return (\n      <div>\n        <Menu\n          key=\"100\"\n          cabotPlaces={this.state.cabotPlaces}\n          openInfoWindow={this.openInfoWindow}\n          minimizeMarker={this.minimizeMarker}\n        />\n        <div id=\"map\"></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export function getPlaces () {\n  return [\n    {\n        'name': \"The Purple Onion\",\n        'description': \"Restaurant\",\n        'latitude': 34.955031,\n        'longitude': -92.007987,\n        'streetAddress': \"1101 S Pine St, Cabot, AR 72023\"\n    },\n    {\n        'name': \"Allfam Bowling & Entertainment Center\",\n        'description': \"Bowling\",\n        'latitude': 34.941082,\n        'longitude': -92.049554,\n        'streetAddress': \"2350 Lakewood Dr, Cabot, AR 72023\"\n    },\n    {\n        'name': \"Silver Screen Cinema 8\",\n        'description': \"Movie Theater\",\n        'latitude': 34.977540,\n        'longitude': -92.024227,\n        'streetAddress': \"100 Cinema Blvd, Cabot, AR 72023\"\n    },\n    {\n        'name': \"Grinds Coffee Co\",\n        'description': \"Coffee Shop\",\n        'latitude': 34.944463,\n        'longitude': -92.009152,\n        'streetAddress': \"8177, 1904 S Pine St ste a, Cabot, AR 72023\"\n    },\n    {\n        'name': \"Walmart Neighborhood Market\",\n        'description': \"Grocery Store\",\n        'latitude': 34.953394,\n        'longitude': -92.007020,\n        'streetAddress': \"1203 S Pine St, Cabot, AR 72023\"\n    }\n  ]\n}\n","export function createMap(src) {\n    let ref = window.document.getElementsByTagName(\"script\")[0];\n    let script = window.document.createElement(\"script\");\n    script.src = src;\n    script.async = true;\n    script.onerror = function () {\n        document.write(\"There was an error loading Google Maps!\");\n    };\n    ref.parentNode.insertBefore(script, ref);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}